<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.multipjt.multi_pjt.community.dao.CommentMapper">

    <!-- 댓글 입력 -->
    <insert id="commentInsert" parameterType="com.multipjt.multi_pjt.community.domain.comments.CommentRequestDTO">
        Insert INTO Comments (
            comments_contents,
            member_id,
            post_id
        )
        VALUES(
            #{comments_contents},
            #{member_id},
            #{post_id}
        )
    </insert>

    <!-- 게시글 번호로 댓글 조회 -->
    <select id ="getPostById" parameterType="int" resultType="com.multipjt.multi_pjt.community.domain.comments.CommentResponseDTO">
        SELECT  c.comments_id, 
                c.comments_contents, 
                c.comments_date,
                c.post_id,
                c.comment_like_counts,
                c.comment_dislike_counts,
                m.member_id, 
                m.nickname AS c_nickname,
                mb.badge_level AS member_badge_level,
                mb.current_points AS member_current_points,
                cb.crew_current_points AS crew_current_points,
                cb.badge_level AS crew_badge_level,
                cb.crew_battle_wins AS crew_battle_wins
        FROM    
            Comments c
        Join 
            Member m ON c.member_id = m.member_id
        LEFT JOIN 
            MemberBadge mb ON c.member_id = mb.member_id
        LEFT JOIN 
            CrewBadge cb ON c.member_id = cb.member_id
        WHERE
            c.post_id = #{post_id}
    </select>
   

    <!-- 댓글 삭제  -->
    <delete id = "commentDelete" parameterType="java.util.HashMap">
        DELETE 
        FROM 
            Comments
        WHERE
            member_id = #{member_id}
        AND 
            comments_id = #{comments_id} 
    </delete>

    <!-- 댓글 번호로 조회 -  삭제 확인용 -->
    <select id = "getCommentById" parameterType="int" resultType="com.multipjt.multi_pjt.community.domain.comments.CommentResponseDTO">
        SELECT * 
        FROM Comments
        WHERE comments_id = #{comments_id}

    </select>


     <!-- 댓글 확인 EXISTS - boolean 값 반환-->
    <select id="commitComment" parameterType="java.util.HashMap" resultType="Boolean">
        SELECT EXISTS (
            SELECT 1
            FROM Comments
            WHERE member_id = #{member_id}
            AND comments_id = #{comments_id}
        ) As existsLike
    </select>

      <!-- 전체 게시글 수 -->
    <select id="countCommentPost" resultType="int">
        SELECT COUNT(*)
        FROM Comments
        WHERE post_id = #{post_id}
    </select>
    
   





   <!--  댓글 좋아요 확인 EXISTS - boolean 값 반환-->
   <select id="commitCommentLike" parameterType="java.util.HashMap" resultType="Boolean">
        SELECT EXISTS (
            SELECT 1
            FROM CommentActivity
            WHERE comments_id = #{comments_id}
            AND member_id = #{member_id}
            AND comment_activity = 'commentLike'
        ) As existsLike
    </select>

    <!-- 댓글 좋아요 테이블에 넣기 -->
    <insert id="commentLikeACInsert" parameterType="java.util.HashMap" >
        INSERT INTO CommentActivity (comment_activity,  post_id, member_id, comments_id)
        VALUES('commentLike', #{post_id}, #{member_id}, #{comments_id});
    </insert>

    <!-- 댓글 좋아요 테이블에서 삭제 -->
    <delete id="commentLikeACDelete"   parameterType="java.util.HashMap" >
        DELETE FROM CommentActivity
        WHERE 
            comments_id = #{comments_id}
        AND 
            member_id = #{member_id}
        AND 
            comment_activity = 'commentLike'    
    </delete>

    <!-- 댓글 좋아요 수 가져오기 -->
    <select id="commentLikeCount" parameterType="java.util.HashMap">
        SELECT comment_like_counts 
        FROM Comments
        WHERE 
            comments_id = #{comments_id}
    </select>

    <!-- 댓글 좋아요 수 변경 -->
    <update id="commentLikeCountUpdate" parameterType="java.util.HashMap">
        UPDATE Comments
        SET 
            comment_like_counts = #{comment_like_counts}
        WHERE
            comments_id = #{comments_id}
    </update>

  
    <!--댓글 싫어요 확인 EXISTS - boolean 값 반환-->
   <select id="commitCommentDisLike" parameterType="java.util.HashMap" resultType="Boolean">
        SELECT EXISTS (
            SELECT 1
            FROM CommentActivity
            WHERE comments_id = #{comments_id}
            AND member_id = #{member_id}
            AND comment_activity = 'commentDislike'
        ) As existsDisLike
    </select>
   
    <!-- 댓글 싫어요 수 조회-->
    <select id="commentDisLikeCount" parameterType="java.util.HashMap">
        SELECT comment_dislike_counts 
        FROM Comments
        WHERE 
            comments_id = #{comments_id}
    </select>


       <!--댓글 싫어요 수 변경 -->
    <update id="commentDisLikeCountUpdate" parameterType="java.util.HashMap">
        UPDATE Comments
        SET 
            comment_dislike_counts = #{comment_dislike_counts}
        WHERE
            comments_id = #{comments_id}
    </update>


    <!--댓글 싫어요를 테이블에 넣기 -->
    <insert id="commentDisLikeACInsert" parameterType="java.util.HashMap" >
        INSERT INTO CommentActivity (comment_activity,  post_id, member_id, comments_id)
        VALUES('commentDislike', #{post_id}, #{member_id}, #{comments_id});
    </insert>

    <!-- 댓글 싫어요를 테이블에서 삭제 -->
    <delete id="commentDisLikeACDelete"   parameterType="java.util.HashMap" >
        DELETE FROM CommentActivity
        WHERE 
            comments_id = #{comments_id}
        AND 
            member_id = #{member_id}
        AND 
            comment_activity = 'commentDislike'    
    </delete>


</mapper>