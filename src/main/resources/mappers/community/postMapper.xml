<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.multipjt.multi_pjt.community.dao.PostMapper">

    <!-- 게시물 등록 -->
    <insert id="postInsert"  parameterType="com.multipjt.multi_pjt.community.domain.posts.PostRequestDTO">
        INSERT INTO Posts (
            post_title,
            post_contents,
            post_up_sport,
            post_sport,
            post_sports_keyword,
            member_id
            <if test="post_hashtag != null and post_hashtag != ''">
                , post_hashtag
            </if>
            <if test="post_img1 != null and post_img1 != ''">
                , post_img1
            </if>
            <if test="post_img2 != null and post_img2 != ''">
                , post_img2
            </if>
          
        ) VALUES (
            #{post_title},
            #{post_contents},
            #{post_up_sport},
            #{post_sport},
            #{post_sports_keyword},
            #{member_id}
            <if test="post_hashtag != null and post_hashtag != ''">
                , #{post_hashtag}
            </if>
            <if test="post_img1 != null and post_img1 != ''">
                , #{post_img1}
            </if>
            <if test="post_img2 != null and post_img2 != ''">
                , #{post_img2}
            </if>
        );
    </insert>

    <!-- 게시글 member_id로 조회 -->
    <select id ="getMemberById" parameterType="int"  resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT * 
        FROM Posts 
        WHERE member_id= #{member_id}
    </select>

    <!-- 게시글 수정 -->
    <update id="postUpdate" parameterType="com.multipjt.multi_pjt.community.domain.posts.PostRequestDTO" >  
        UPDATE Posts
        SET  
            <if test="post_title != null and post_title != ''">
                post_title = #{post_title}
            </if>
            <if test="post_contents != null and post_contents != ''">
                , post_contents = #{post_contents}
            </if>
             <if test="post_up_sport != null and post_up_sport != ''">
                , post_up_sport = #{post_up_sport}
            </if>
            <if test="post_sport != null and post_sport != ''">
                , post_sport = #{post_sport}
            </if>
            <if test="post_sports_keyword != null and post_sports_keyword != ''">
                , post_sports_keyword = #{post_sports_keyword}
            </if>
            <if test="post_img1 != null and post_img1 != ''">
                , post_img1 = #{post_img1}
            </if>
            <if test="post_img2 != null and post_img2 != ''">
                , post_img2 = #{post_img2}
            </if>
             <if test="post_hashtag != null and post_hashtag != ''">
                , post_hashtag = #{post_hashtag}
            </if>
            , post_modify_date = now()
        WHERE
            post_id = #{post_id} 
            AND    member_id = #{member_id} 
    </update>

    <!-- 기존 이미지 찾기 -->
    <select id="postImgsSelect" parameterType="Map">
        SELECT post_img1, post_img2
        FROM Posts
        WHERE post_id = #{post_id}
    </select>



    <!-- 수정된 게시글 조회 -->
    <select id="updatePostResult" 
            parameterType="com.multipjt.multi_pjt.community.domain.posts.PostRequestDTO" 
            resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO"
        >
        SELECT 
            p.post_id AS post_id, 
            p.post_title AS post_title, 
            p.post_contents AS post_contents, 
            p.post_sport AS post_sport, 
            p.post_up_sport AS post_up_sport, 
            p.post_sports_keyword AS post_sports_keyword, 
            p.post_date AS post_date, 
            p.post_modify_date AS post_modify_date, 
            p.post_hashtag AS post_hashtag,
            p.post_like_counts AS post_like_counts, 
            p.post_unlike_counts AS post_unlike_counts, 
            p.post_views AS post_views, 
            p.post_img1 AS post_img1,
            p.post_img2 AS post_img2,
            m.nickname AS post_nickname,  
            m.member_img AS member_img,
            m.member_id AS member_id,
            COUNT(c.comments_id) AS comments_count,
            mb.badge_level AS member_badge_level,
            mb.current_points AS member_current_points,
            cb.crew_current_points AS crew_current_points,
            cb.badge_level AS crew_badge_level,
            cb.crew_battle_wins AS crew_battle_wins  
        FROM 
            Posts p
        LEFT JOIN
            Comments c ON  p.post_id = c.post_id 
        LEFT JOIN 
            Member m ON p.member_id = m.member_id  
        LEFT JOIN 
            MemberBadge mb ON p.member_id = mb.member_id
        LEFT JOIN 
            CrewBadge cb ON p.member_id = cb.member_id  
        WHERE 
            p.post_id = #{post_id} 
        ORDER BY 
            p.post_date DESC

    </select>


    <!-- 게시글 삭제 -->
    <delete id="postDelete" parameterType="java.util.HashMap">
        delete from Posts
        WHERE 
            post_id = #{post_id}
        AND 
            member_id=#{member_id}
    </delete>
    <!-- post_id로 게시글 조회 -->
    <select id ="getPostById" parameterType="int"  resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT * 
        FROM Posts 
        WHERE post_id= #{post_id}
    </select>


    <!-- 게시글 검색  제목/내용/해시태그/운동종목/ 키워드 -->
    <select id="postSelectTCH" parameterType="java.util.HashMap" 
            resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT @rownum := @rownum +1 As rownum, search_keyword.* 
        From(SELECT 
            p.post_id,
            post_title,
            post_contents,
            post_sport,
            post_sports_keyword,
            post_like_counts,
            post_views,
            p.post_hashtag AS post_hashtag,
            p.member_id,
            m.member_img AS member_img,
            m.nickname AS post_nickname,
            post_date,
            COUNT(c.comments_id) AS comments_count,
            mb.badge_level AS member_badge_level,
            mb.current_points AS member_current_points,
            cb.crew_current_points AS crew_current_points,
            cb.badge_level AS crew_badge_level,
            cb.crew_battle_wins AS crew_battle_wins
        FROM
            Posts p
        INNER JOIN
            Member m ON p.member_id = m.member_id
        LEFT JOIN
            Comments c ON p.post_id = c.post_id
        LEFT JOIN 
            MemberBadge mb ON p.member_id = mb.member_id
        LEFT JOIN 
            CrewBadge cb ON p.member_id = cb.member_id
        WHERE
            post_title LIKE CONCAT( '%', #{keyword}, '%' )
            OR
            post_contents LIKE CONCAT( '%', #{keyword}, '%' )
            OR
            post_sport LIKE CONCAT( '%', #{keyword}, '%' )
            OR
            post_sports_keyword LIKE CONCAT( '%', #{keyword}, '%' )
            OR
            post_hashtag LIKE CONCAT( '%', #{keyword}, '%' )
        GROUP BY
            p.post_id 
        ORDER BY 
            p.post_date DESC
        LIMIT #{size} OFFSET #{offset}) AS search_keyword, (SELECT @rownum := 0 )r
    </select>
    <!-- 전체 검색 게시글 수 -->
    <select id="countSearchPosts" parameterType="java.util.HashMap" resultType="int">
       SELECT COUNT(DISTINCT p.post_id) AS total_count
        FROM Posts p
        INNER JOIN Member m ON p.member_id = m.member_id
        LEFT JOIN Comments c ON p.post_id = c.post_id
        WHERE post_title LIKE CONCAT('%', #{keyword}, '%')
            OR post_contents LIKE CONCAT('%', #{keyword}, '%')
            OR post_sport LIKE CONCAT( '%', #{keyword}, '%' )
            OR post_sports_keyword LIKE CONCAT( '%', #{keyword}, '%' )
            OR post_hashtag LIKE CONCAT('%', #{keyword}, '%')
        </select>
    <!-- 전체 게시글 조회 -->
   <select id="postAllSelect" parameterType="java.util.HashMap"  resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT @rownum := @rownum + 1 AS rownum, Posts.*
        FROM (
            SELECT 
                p.post_id AS post_id,
                p.post_title AS post_title,
                p.post_sport AS post_sport,
                p.post_date AS post_date,
                p.post_up_sport AS post_up_sport,
                p.post_sports_keyword AS sport_keyword,
                p.post_like_counts AS post_like_counts,
                p.post_views AS post_views,
                p.post_hashtag AS post_hashtag,
                COUNT(c.comments_id) AS comments_count,
                m.member_img AS member_img,
                m.nickname AS post_nickname,
                m.member_id AS member_id,
                mb.badge_level AS member_badge_level,
                mb.current_points AS member_current_points,
                cb.crew_current_points AS crew_current_points,
                cb.badge_level AS crew_badge_level,
                cb.crew_battle_wins AS crew_battle_wins
            FROM 
                Posts p
            LEFT JOIN 
                Comments c ON p.post_id = c.post_id
            JOIN 
                Member m ON p.member_id = m.member_id
            LEFT JOIN 
                MemberBadge mb ON p.member_id = mb.member_id
            LEFT JOIN 
                CrewBadge cb ON p.member_id = cb.member_id
            WHERE
                <if test="post_up_sport != null and post_up_sport != ''">
                    p.post_up_sport = #{post_up_sport}
                </if>
                <if test="post_sport != null and post_sport != ''">
                    AND p.post_sport = #{post_sport}
                </if> 
            GROUP BY 
                p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, p.post_up_sport,
                p.post_like_counts, p.post_views, m.nickname, m.member_id, mb.badge_level, mb.current_points, cb.crew_current_points, cb.badge_level, cb.crew_battle_wins
            ORDER BY 
                p.post_date DESC
            LIMIT #{size} OFFSET #{offset}) Posts, (SELECT @rownum := 0) r
    </select> 



    <!-- 전체 게시글 수 -->
    <select id="countPosts" parameterType="java.util.HashMap" resultType="int">
        SELECT COUNT(*)
        FROM Posts p
        WHERE  1=1 
           <if test="post_up_sport != null and post_up_sport != ''">
                AND p.post_up_sport= #{post_up_sport}
            </if>
           <if test="post_sport != null and post_sport != ''">
                AND p.post_sport = #{post_sport}
            </if> 

    </select>

   <!-- 상세 게시글 -->
    <select id="postDetailSelect" parameterType="java.util.HashMap" 
            resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT 
            p.post_id AS post_id, 
            p.post_title AS post_title, 
            p.post_contents AS post_contents, 
            p.post_sport AS post_sport, 
            p.post_up_sport AS post_up_sport, 
            p.post_sports_keyword AS post_sports_keyword, 
            p.post_date AS post_date, 
            p.post_modify_date AS post_modify_date, 
            p.post_hashtag AS post_hashtag,
            p.post_like_counts AS post_like_counts, 
            p.post_unlike_counts AS post_unlike_counts, 
            p.post_views AS post_views, 
            p.post_img1 AS post_img1,
            p.post_img2 AS post_img2,
            m.nickname AS post_nickname,  
            m.member_img AS member_img,
            m.member_id AS member_id,
            COUNT(c.comments_id) AS comments_count, 
            mb.badge_level AS member_badge_level,
            mb.current_points AS member_current_points,
            cb.crew_current_points AS crew_current_points,
            cb.badge_level AS crew_badge_level,
            cb.crew_battle_wins AS crew_battle_wins     
        FROM 
            Posts p
        LEFT JOIN
            Comments c ON p.post_id = c.post_id 
        LEFT JOIN 
            Member m ON p.member_id = m.member_id 
        LEFT JOIN 
            MemberBadge mb ON p.member_id = mb.member_id
        LEFT JOIN 
            CrewBadge cb ON p.member_id = cb.member_id       
        WHERE 
            p.post_id = #{post_id} 
        ORDER BY 
            p.post_date DESC
    </select>

    <update id="recommendationClick" parameterType="map">
        UPDATE PostRecommendations
        SET is_clicked = true
        WHERE member_id = #{member_id}
            AND 
                post_id = #{post_id}

    </update>

    <!-- 댓글 조회 -->
    <select id="postDetailComment" 
            parameterType="java.util.HashMap" 
            resultType="com.multipjt.multi_pjt.community.domain.comments.CommentResponseDTO">
        SELECT  c.comments_id, 
                c.comments_contents, 
                c.comments_date,
                c.comment_like_counts,
                c.comment_dislike_counts,
                c.post_id,
                m.member_id, 
                m.member_img AS member_img,
                m.nickname AS c_nickname
        FROM    
            Comments c
        Join 
            Member m ON c.member_id = m.member_id
        WHERE
            c.post_id = #{post_id}
    </select>


    <select id="newMemberRCPost" parameterType="map"
                resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_sports_keyword AS sport_keyword,
            p.post_up_sport AS post_up_sport,
            p.post_like_counts AS post_like_count,
            p.post_views AS post_views,
            p.post_hashtag AS post_hashtag,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_img AS member_img,
            m.member_id AS member_id,
            (p.post_like_counts * 1.0 + p.post_views * 0.5) AS score
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        WHERE 
            p.post_up_sport = #{post_up_sport}
            AND p.post_sport = #{post_sport}
            AND p.post_id NOT IN (
            SELECT pr.post_id
                FROM PostRecommendations pr
                WHERE pr.member_id = #{member_id} AND pr.is_clicked = true
            )
        GROUP BY
            p.post_id
        ORDER BY 
            score DESC
        LIMIT 
            #{limit}


    </select>
    
    <select id="searchUpPost" parameterType="String" resultType="String">
        SELECT post_up_sport
        FROM 
            Posts
        WHERE 
            post_sport = #{post_sport}
        LIMIT
            1
    </select>


    <!-- 회원 가입 / 활동 없는 회원 판단 -->
    <select id="isNewMember" parameterType="int" resultType="int">
        <![CDATA[
        SELECT COUNT(*)
        FROM Member m
        LEFT JOIN UserActivity ua ON m.member_id = ua.member_id
        WHERE m.member_id = #{member_id}
        AND (
            m.regdate = CURDATE()
            OR (
                (SELECT MAX(ua_sub.activity_date)
                FROM UserActivity ua_sub
                WHERE ua_sub.member_id = #{member_id}
                ) <= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
            )
            OR ua.activity_date IS NULL
        );

        ]]>
    </select>

    <!-- 회원의 관심 운동 조회 -->
    <select id="interestSport" parameterType="int" resultType="string">
        SELECT profile_sport1, profile_sport2, profile_sport3 
        FROM 
            UserProfile
        WHERE
            member_id = #{member_id}
    </select>


    <!-- 활동중인 회원 키워드 -->
    <select id="exMemberData" parameterType="int" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        <![CDATA[
            SELECT post_up_sport, post_sport,  total_score
            FROM (
                SELECT p.post_sport, p.post_up_sport,
                    SUM(CASE WHEN ua.user_activity = 'like' THEN 1 ELSE 0 END) * 1.0 AS like_score,
                    SUM(CASE WHEN ua.user_activity = 'view' THEN 1 ELSE 0 END) * 0.5 AS view_score,
                    (SUM(CASE WHEN ua.user_activity = 'like' THEN 1 ELSE 0 END) * 1.0 + 
                    SUM(CASE WHEN ua.user_activity = 'view' THEN 1 ELSE 0 END) * 0.5) * 1.0 AS total_score
                FROM UserActivity ua
                JOIN Posts p 
                    ON ua.post_id = p.post_id
                WHERE 
                    ua.member_id = #{member_id}
                    AND 
                        ua.activity_date >= DATE_SUB(CURDATE(), INTERVAL 2 DAY)
                GROUP BY p.post_sport, p.post_up_sport

                UNION ALL 

                SELECT p.post_sport, p.post_up_sport,
                    SUM(CASE WHEN ua.user_activity = 'like' THEN 1 ELSE 0 END) * 1.0 AS like_score,
                    SUM(CASE WHEN ua.user_activity = 'view' THEN 1 ELSE 0 END) * 0.5 AS view_score,
                    (SUM(CASE WHEN ua.user_activity = 'like' THEN 1 ELSE 0 END) * 1.0 + 
                    SUM(CASE WHEN ua.user_activity = 'view' THEN 1 ELSE 0 END) * 0.5 ) * 0.7 AS total_score
                FROM UserActivity ua
                JOIN Posts p 
                    ON ua.post_id = p.post_id
                WHERE 
                    ua.member_id = #{member_id}
                    AND
                        ua.activity_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
                    AND
                        ua.activity_date < DATE_SUB(CURDATE(), INTERVAL 2 DAY)
                GROUP BY p.post_sport, p.post_up_sport                
                ) AS RankResult
            GROUP BY post_sport, post_up_sport
            ORDER BY total_score DESC
            LIMIT 6
        ]]>
    </select>

    <select id="findRCPosts" parameterType="java.util.HashMap" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">   
        SELECT 
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_sports_keyword AS post_sports_keyword,
            p.post_like_counts AS post_like_counts,
            p.post_views AS post_views,
            p.post_hashtag AS post_hashtag,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_id AS member_id,
            m.member_img AS member_img,
            (p.post_like_counts*1.0 + post_views*0.5) AS score,
             (SELECT pr.is_clicked FROM PostRecommendations pr WHERE pr.post_id = p.post_id AND pr.member_id = #{member_id}) AS is_clicked
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        WHERE 
        
        
            p.post_sport = #{post_sport}    
        AND 
            post_up_sport = #{post_up_sport}
             <if test="postIds != null and postIds.size() > 0">
            AND p.post_id NOT IN
           
                <foreach collection="postIds" item="postId" open="(" separator="," close=")">
                    #{postId}
                </foreach>
                
            </if>
        GROUP BY 
            p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, 
            p.post_like_counts, p.post_views, m.nickname, m.member_id
        ORDER BY score DESC    
        LIMIT 
            #{limit}  
    </select>

    <select id="notinPostID"  parameterType="int" resultType="int">
        SELECT pr.post_id
        FROM PostRecommendations pr
        WHERE pr.member_id = #{member_id} AND  pr.is_clicked = 1
    </select> 


    <!-- 추천 테이블에 넣기 -->
    <insert id="insertRec" parameterType="map">
      
        INSERT INTO PostRecommendations (post_id, member_id)
        SELECT #{post_id}, #{member_id}
        FROM DUAL
        WHERE NOT EXISTS (
            SELECT 1
            FROM PostRecommendations
            WHERE post_id = #{post_id} AND member_id = #{member_id}
        )
        
    </insert>

    <!-- 키워드 검색 -->
    <select id="searchKeyword" parameterType="java.util.HashMap" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
    SELECT @rownum := @rownum +1 As rownum, Posts.* 
        From(SELECT 
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_up_sport AS post_up_sport,
            p.post_sports_keyword AS post_sports_keyword,
            p.post_like_counts AS post_like_count,
            p.post_views AS post_views,
            p.post_hashtag AS post_hashtag,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_img AS member_img,
            m.member_id AS member_id,
            mb.badge_level AS member_badge_level,
            mb.current_points AS member_current_points,
            cb.crew_current_points AS crew_current_points,
            cb.badge_level AS crew_badge_level,
            cb.crew_battle_wins AS crew_battle_wins
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        LEFT JOIN 
            MemberBadge mb ON p.member_id = mb.member_id
        LEFT JOIN 
            CrewBadge cb ON p.member_id = cb.member_id    
        WHERE
             p.post_sports_keyword = #{post_sports_keyword}
        GROUP BY 
            p.post_id
        ORDER BY 
            p.post_date DESC
        LIMIT #{size} OFFSET #{offset}) Posts, (SELECT @rownum := 0 )r
    
    </select>

    <!-- 전체 키워드 조회 수 -->
    <select id="countKeyword" parameterType="java.util.HashMap" resultType="int">
        SELECT COUNT(*)
        FROM Posts p
        WHERE 
                p.post_sports_keyword= #{post_sports_keyword}
            AND 
                p.post_up_sport = #{post_up_sport}

    </select>

        <!-- 키워드 - 오운완 - 좋아요 기준 -->
     <select id="searchToday" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
 
        SELECT 
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_up_sport AS post_up_sport,
            p.post_sports_keyword AS post_sports_keyword,
            p.post_like_counts AS post_like_count,
            p.post_views AS post_views,
            p.post_hashtag AS post_hashtag,
            p.post_img1 AS post_img1,
            p.post_img2 AS post_img2,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_id AS member_id
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        WHERE
             p.post_sports_keyword = "오운완"
        GROUP BY 
            p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, p.post_up_sport,
            p.post_like_counts, p.post_views, m.nickname, m.member_id
        ORDER BY 
            p.post_like_counts DESC
        LIMIT 10
    
    </select>



    <!-- 키워드 - 중고장터 - 작성일자 기준 -->
    <select id="searchMarketplace" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT 
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_up_sport AS post_up_sport,
            p.post_sports_keyword AS post_sports_keyword,
            p.post_like_counts AS post_like_count,
            p.post_views AS post_views,
            p.post_hashtag AS post_hashtag,
            p.post_img1 AS post_img1,
            p.post_img2 AS post_img2,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_id AS member_id
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        WHERE
             p.post_sports_keyword = "중고장터"
        GROUP BY 
            p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, p.post_up_sport,
            p.post_like_counts, p.post_views, m.nickname, m.member_id
        ORDER BY 
            p.post_date DESC
        LIMIT 10
    </select>

      <!-- 사용자 작성 게시글 -->
    <select id="myPosts" parameterType="int" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT 
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_up_sport AS post_up_sport,
            p.post_sports_keyword AS post_sports_keyword,
            p.post_like_counts AS post_like_count,
            p.post_views AS post_views,
            p.post_hashtag AS post_hashtag,
            p.post_img1 AS post_img1,
            p.post_img2 AS post_img2,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_id AS member_id
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        WHERE
             p.member_id = #{member_id}
        GROUP BY 
            p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, p.post_up_sport,
            p.post_like_counts, p.post_views, m.nickname, m.member_id
        ORDER BY 
            p.post_date DESC
    </select>

    <!-- 사용자가 좋아요를 누른 게시글 -->
        <select id="myLikePosts" parameterType="int" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
            SELECT 
                p.post_id AS post_id,
                p.post_title AS post_title,
                p.post_sport AS post_sport,
                p.post_date AS post_date,
                p.post_up_sport AS post_up_sport,
                p.post_sports_keyword AS post_sports_keyword,
                p.post_like_counts AS post_like_count,
                p.post_views AS post_views,
                p.post_hashtag AS post_hashtag,
                p.post_img1 AS post_img1,
                p.post_img2 AS post_img2,
                COUNT(c.comments_id) AS comments_count,
                m.nickname AS post_nickname,
                m.member_id AS member_id
            FROM 
                Posts p
            LEFT JOIN 
                Comments c ON p.post_id = c.post_id
            JOIN 
                Member m ON p.member_id = m.member_id
            JOIN 
                UserActivity ua ON p.post_id = ua.post_id
            WHERE
                ua.user_activity = 'like'  
                AND 
                ua.member_id = #{member_id}
            GROUP BY 
                p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, p.post_up_sport,
                p.post_like_counts, p.post_views, m.nickname, m.member_id
            ORDER BY 
                p.post_date DESC
        </select>

    <select id="selectPorofile"  parameterType="map" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT 
            m.member_id AS member_id,
            m.member_img AS member_img,
            m.nickname AS post_nickname,
            mb.current_points AS current_points,
            mb.badge_level AS member_badge_level,
            cb.crew_current_points AS crew_current_points,
            cb.badge_level AS crew_badge_level,
            cb.crew_battle_wins AS crew_battle_wins
        FROM 
            Member m
        LEFT JOIN 
            MemberBadge mb ON m.member_id = mb.member_id
        LEFT JOIN 
            CrewBadge cb ON m.member_id = cb.member_id
        WHERE m.member_id = #{member_id};

    </select>
</mapper>